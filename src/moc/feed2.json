{
    "query":{
        "count":10,
        "created":"2015-03-09T19:46:36Z",
        "lang":"fr",
        "diagnostics":{
            "publiclyCallable":"true",
            "url":{
                "execution-start-time":"0",
                "execution-stop-time":"482",
                "execution-time":"482",
                "content":"http://dailyjs.com/atom.xml"
            },
            "user-time":"485",
            "service-time":"482",
            "build-version":"0.2.49"
        },
        "results":{
            "entry":[
                {
                    "title":"Motion Sensing with the Doppler Effect",
                    "link":{
                        "href":"http://dailyjs.com/2015/03/09/doppler"
                    },
                    "updated":"2015-03-09T00:00:00+00:00",
                    "id":"http://dailyjs.com/2015/03/09/doppler",
                    "content":{
                        "type":"html",
                        "content":"\n     <p>If you try out the following project, be aware that it emits a high frequency sound! Daniel Rapp, who previously sent in <a href='http://dailyjs.com/2014/10/27/spectroface/'>Spectroface</a>, has been working on <a href='http://danielrapp.github.io/doppler/'>motion sensing using the Doppler effect</a> (GitHub: <a href='https://github.com/DanielRapp/doppler'>DanielRapp/doppler</a>, License: <em>MIT</em>). It&#8217;s based on a paper (PDF: <a href='http://research.microsoft.com/en-us/um/redmond/groups/cue/publications/guptasoundwavechi2012.pdf'>guptasoundwavechi2012.pdf</a>) that explores the concept in more detail. From the abstract:</p>\n\n<blockquote>\n<p>We present SoundWave, a technique that leverages the speaker and microphone already embedded in most commodity devices to sense in-air gestures around the device. To do this, we generate an inaudible tone, which gets frequency-shifted when it reflects off moving objects like the hand. We measure this shift with the microphone to infer various gestures. In this note, we describe the phenomena and detection algorithm, demonstrate a variety of gestures, and present an informal evaluation on the robustness of this approach across different devices and people.</p>\n</blockquote>\n\n<p>Daniel&#8217;s version uses HTML5 and includes several examples, including page scrolling and a theremin. The source uses the audio API and typed arrays. I haven&#8217;t fully figured out the source, but I think it emits tones from the left and right speakers and then compares the result from the mic to figure out movement.</p>\n\n<p>This is one of the best hacks I&#8217;ve seen for a while, and although the tone makes the applications limited the fact it works at all is fascinating!</p>\n   "
                    }
                },
                {
                    "title":"Angular 2 and TypeScript, Comparing Angular 1.x and 2.0",
                    "link":{
                        "href":"http://dailyjs.com/2015/03/06/typekit-angular"
                    },
                    "updated":"2015-03-06T00:00:00+00:00",
                    "id":"http://dailyjs.com/2015/03/06/typekit-angular",
                    "content":{"type":"html","content":"\n     <h3 id='angular_2_is_built_on_typescript'>Angular 2 is Built on TypeScript</h3>\n\n<p>There&#8217;s a post on the msdn blog that says <a href='http://blogs.msdn.com/b/typescript/archive/2015/03/05/angular-2-0-built-on-typescript.aspx'>Angular 2.0 is built with TypeScript</a>. This is a big step, but there is a precedent for it &#8211; <a href='http://angularjs.blogspot.co.uk/2014/10/ng-europe-angular-13-and-beyond.html'>an earlier Angular blog post mentioned the AtScript project</a> that resulted in a collaboration between <a href='http://blogs.msdn.com/b/typescript/archive/2014/10/22/typescript-and-the-road-to-2-0.aspx'>Microsoft and the Angular team</a>.</p>\n\n<blockquote>\n<p>This partnership has been very productive and rewarding experience for us, and as part of this collaboration, we&#8217;re happy to announce that Angular 2 will now be built with TypeScript. We&#8217;re looking forward to seeing what people will be able to do with these new tools and continuing to work with the Angular team to improve the experience for Angular developers.</p>\n</blockquote>\n\n<p>Now AtScript development has been abandoned in favour of TypeScript, what does this mean for Angular developers? There&#8217;s a <a href='https://github.com/davideast/ng2do/blob/master/todo.js'>TodoMVC TypeScript Angular 2.0 example project on GitHub</a>, which uses JavaScript for the main code. To use it, you&#8217;ll need to download the new Angular 2.0 code separately.</p>\n\n<p>Hopefully this shift will result in a more future-proof Angular, but it&#8217;s hard to tell if switching to TypeScript now is a good idea, given the interest in ES6 and ES7.</p>\n\n<h3 id='comparing_angular_1x_and_20'>Comparing Angular 1.x and 2.0</h3>\n\n<p>In case you&#8217;re excited/worried/apathetic about the previous news, Shawn McKay sent in a post that compares <a href='http://shmck.com/comparing-angular-1-x-2-0/'>angular 2.0 with 1.x</a>:</p>\n\n<blockquote>\n<p>Angular 2.0 looks fantastic. It&#8217;s not ready yet, but you can play around with it today. Checkout the <a href='https://github.com/angular/angular'>GitHub</a> for more. There are also some examples available, such as <a href='https://github.com/davideast/ng2do'>ng2do</a>.</p>\n</blockquote>\n\n<p>The post explains how to set up Angular 2.0 and outlines the major new features. If you&#8217;re also working with React, then you might want to read more about the new DOM handling:</p>\n\n<blockquote>\n<p>&#8220;2.0: In many ways, Angular 2.0 seems to handle DOM style manipulation with something similar to React.js&#8217;s virtual DOM, which they referred to in a recent presentation as the &#8220;view&#8221;. In response to a recent question about &#8216;Angular Native?&#8217;, Misko mentioned that this View could be run on a web worker or even potentially on native.&#8221;</p>\n</blockquote>\n   "}},
                {
                    "title":"Make Parsers and DSLs with Jacob",
                    "link":{
                        "href":"http://dailyjs.com/2015/03/05/jacob"
                    },
                    "updated":"2015-03-05T00:00:00+00:00",
                    "id":"http://dailyjs.com/2015/03/05/jacob",
                    "content":{
                        "type":"html",
                        "content":"\n     <p>Recently there have been several exciting projects that provide support for upcoming ES6 and ES7 features. One way of implementing parsers like this is with a context-free grammar. A popular way to do this is with <a href='https://zaach.github.io/jison/docs/'>Jison</a>, but Gabriele Cannata sent in a new library called <a href='http://canna71.github.io/Jacob/'>Jacob</a> (GitHub: <a href='https://github.com/Canna71/Jacob'>Canna71/Jacob</a>, License: <em>ISC</em>, npm: <a href='https://www.npmjs.com/package/jacob'>jacob</a>).</p>\n\n<p>Jacob has a lexer and a parser. In that sense it&#8217;s inspired by both Flex and Bison. If you want to learn about Flex and Bison, I found an article about <a href='http://gnuu.org/2009/09/18/writing-your-own-toy-compiler/1/'>writing a toy compiler with Flex, Bison, and LLVM</a>. Jacob&#8217;s lexer supports regular expressions and lexer actions. The parser supports <a href='http://en.wikipedia.org/wiki/Simple_LR_parser'>simple LR parsing</a>, <a href='http://en.wikipedia.org/wiki/LALR_parser'>Look-Ahead LR parsing</a>, and <a href='http://en.wikipedia.org/wiki/Canonical_LR_parser'>canonical LR parsing</a>. The grammar is specified with <a href='http://en.wikipedia.org/wiki/Extended_Backus–Naur_Form'>Extended Backus–Naur Form</a>, which means you define a formal language based on how symbols can be combined into legal sequences.</p>\n\n<p>This means you can define your language or DSL, validate code written with it, and produce abstract syntax trees that can be used to write compilers.</p>\n\n<p>I&#8217;ve written very basic grammar files with Jison before, and I&#8217;ve found that it takes practice to get the hang of it. The best place to get started is with real examples, so have a look at the <a href='https://github.com/Canna71/Jacob/tree/master/examples'>Jacob examples folder</a>. Also, the JSON definition on the <a href='http://www.json.org'>json.org site</a> will help you to understand how something you&#8217;re familiar with maps to a formal grammar.</p>\n\n<p>If you&#8217;ve ever wondered how people write things like transpilers in a formal and structured way, then it&#8217;s worth checking out Jison and Jacob.</p>\n   "
                    }
                },
                {
                    "title":"Node Roundup: npm 3, io.js 1.4.3, NoDent",
                    "link":{
                        "href":"http://dailyjs.com/2015/03/04/node-roundup"
                    },
                    "updated":"2015-03-04T00:00:00+00:00",
                    "id":"http://dailyjs.com/2015/03/04/node-roundup",
                    "content":{
                        "type":"html",
                        "content":"\n     <h3 id='npm_roadmap_for_3_using_jquery_modules'>npm: Roadmap for 3, Using jQuery Modules</h3>\n\n<p>The <a href='https://github.com/npm/npm/wiki/Roadmap'>npm roadmap</a> has been updated with details on npm. This includes multi-stage installation, improvements to shrinkwrap, and progress bars. There&#8217;s an entry that aims to solve the front-end tooling problem, and I noticed shipping HTML and CSS is mentioned. I prefer a Browserify/npm-based workflow, but I&#8217;ve always found this stage less than elegant, so it&#8217;ll be interesting to see what happens there.</p>\n\n<p>To read more, visit the <a href='http://blog.npmjs.org/post/112610795275/npm-weekly-7'>npm blog</a>. There&#8217;s also another interesting post about jQuery, which <a href='http://blog.npmjs.org/post/112064849860/using-jquery-plugins-with-npm'>describes how to use jQuery plugins through npm</a>. The previous post on jQuery was about publishing modules, but this one shows how to consume plugins even if they don&#8217;t use npm.</p>\n\n<h3 id='iojs_143'>io.js 1.4.3</h3>\n\n<p>There was a new io.js release (1.4.3) on Monday, which has quite a big fix for streams on Windows and the beginnings of ARM support. The 1.4.x branch was released at 1.4.1 due to a libuv bug in 1.4.0. This branch adds newer versions of V8, npm, and libuv, but also has improvements for process, stream, and http.</p>\n\n<p>For more details on io.js and npm changes, you can look at the changelogs on GitHub:</p>\n\n<ul>\n<li><a href='https://github.com/npm/npm/blob/master/CHANGELOG.md'>npm/CHANGELOG.md</a></li>\n\n<li><a href='https://github.com/iojs/io.js/blob/v1.x/CHANGELOG.md'>io.js/CHANGELOG.md</a></li>\n</ul>\n\n<p>They&#8217;re both nicely annotated with links to commits, and summarise major changes.</p>\n\n<h3 id='nodent'>NoDent</h3>\n\n<p>In my DailyJS email backlog I found NoDent (GitHub: <a href='https://github.com/MatAtBread/nodent'>MatAtBread/nodent</a>, License: <em>BSD-2-Clause</em>, npm: <a href='https://www.npmjs.com/package/nodent'>nodent</a>). It&#8217;s a small module that adds support for the proposed <code>aysnc</code> and <code>await</code> keywords. They&#8217;re not too hard to learn, and once you get used to them they can make asynchronous code more readable.</p>\n\n<p>The basic idea is to mark asynchronous functions with the <code>async</code> keyword, and then use the <code>await</code> keyword before they&#8217;re called.</p>\n<div class='highlight'><pre><code class='javascript'><span class='nx'>async</span> <span class='kd'>function</span> <span class='nx'>tellYouLater</span><span class='p'>(</span><span class='nx'>sayWhat</span><span class='p'>)</span> <span class='p'>{</span>\n  <span class='c1'>// Do something asynchronous and terminal, such as DB access, web access, etc.</span>\n  <span class='k'>return</span> <span class='nx'>result</span><span class='p'>;</span>\n<span class='p'>}</span>\n\n<span class='kd'>var</span> <span class='nx'>result</span> <span class='o'>=</span> <span class='nx'>await</span> <span class='nx'>tellYouLater</span><span class='p'>(</span><span class='s1'>&#39;Hi there&#39;</span><span class='p'>);</span>\n</code></pre>\n</div>\n<p>This will cause execution to wait until <code>tellYouLater</code> returns. I&#8217;ve used <code>async/await</code> in C#, and it works well for methods that return a single value (rather than an observable with a sequence of values).</p>\n\n<p>The author&#8217;s readme has lots of examples of uses and abuses, so it&#8217;s worth reading if you seriously want <code>async/await</code> now.</p>\n   "
                    }
                },
                {
                    "title":"ExcelJS, Material Refresh",
                    "link":{
                        "href":"http://dailyjs.com/2015/03/03/excel-material-refresh"
                    },
                    "updated":"2015-03-03T00:00:00+00:00",
                    "id":"http://dailyjs.com/2015/03/03/excel-material-refresh",
                    "content":{
                        "type":"html",
                        "content":"\n     <h3 id='exceljs'>ExcelJS</h3>\n\n<p>ExcelJS (GitHub: <a href='https://github.com/guyonroche/exceljs'>guyonroche/exceljs</a>, License: <em>MIT</em>, npm: <a href='http://npmjs.com/package/exceljs'>exceljs</a>) by Guyon Roche is a module for converting Excel spreadsheets to styles and JSON. It was created by reverse engineering Excel files into pure JavaScript, so if you look at the source it&#8217;s surprisingly readable. Everything is split up into modules, and simple classes are used to model the main entities in Excel documents.</p>\n\n<p>For example, the <a href='https://github.com/guyonroche/exceljs/blob/master/lib/cell.js'>cell.js file</a> defines a <code>Cell</code> object that has methods for addressing the cell and manipulating styles. This is then used to build data types like <code>StringValue</code> and <code>DateValue</code>.</p>\n\n<p>It can read and write Excel, and it handles functions, links, fonts, borders, alignments, and fills. Here&#8217;s the author&#8217;s example of reading an Excel file:</p>\n<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>workbook</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Excel</span><span class='p'>.</span><span class='nx'>Workbook</span><span class='p'>();</span>\n<span class='nx'>workbook</span><span class='p'>.</span><span class='nx'>xlsx</span><span class='p'>.</span><span class='nx'>readFile</span><span class='p'>(</span><span class='nx'>filename</span><span class='p'>)</span>\n  <span class='p'>.</span><span class='nx'>then</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>\n    <span class='c1'>// use workbook</span>\n  <span class='p'>});</span>\n\n<span class='c1'>// pipe from stream</span>\n<span class='kd'>var</span> <span class='nx'>workbook</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Excel</span><span class='p'>.</span><span class='nx'>Workbook</span><span class='p'>();</span>\n<span class='nx'>stream</span><span class='p'>.</span><span class='nx'>pipe</span><span class='p'>(</span><span class='nx'>workbook</span><span class='p'>.</span><span class='nx'>xlsx</span><span class='p'>.</span><span class='nx'>createInputStream</span><span class='p'>());</span>\n</code></pre>\n</div>\n<p>If you&#8217;re interested in Excel, then also check out <a href='https://github.com/SheetJS/js-xls'>js-xls</a> and <a href='http://sheetjs.com'>SheetJS</a>.</p>\n\n<h3 id='material_refresh'>Material Refresh</h3>\n<img src='http://dailyjs.com/images/posts/material-refresh.gif' alt='' style='width: 530px' />\n<p><a href='http://lightningtgc.github.io/material-refresh/'>Material Refresh</a> (GitHub: <a href='https://github.com/lightningtgc/material-refresh/'>lightningtgc/material-refresh</a>, License: <em>MIT</em>, npm: <a href='https://www.npmjs.com/package/material-refresh'>material-refresh</a>) by gctang is a Material Design pull/swipe to refresh library. It has several modes of display: above surface, below surface, and button.</p>\n\n<p>I tried it out on a mobile device and the animations seemed very smooth. To use the library, set it up by calling <code>mRefresh</code> and then <code>mRefresh.resolve()</code> to hide the spinner.</p>\n   "
                    }
                },
                {
                    "title":"React in Atom, JSX Control Statements, Baobab",
                    "link":{
                        "href":"http://dailyjs.com/2015/03/02/react-libraries"
                    },
                    "updated":"2015-03-02T00:00:00+00:00",
                    "id":"http://dailyjs.com/2015/03/02/react-libraries",
                    "content":{
                        "type":"html",
                        "content":"\n     <p>I seem to have a huge backlog of React-related submissions to the DailyJS inbox, so you might see more React libraries than usual over the next few weeks. There&#8217;s no conspiracy to promote React, it&#8217;s just that readers seem interested in it!</p>\n\n<h3 id='react_in_atom'>React in Atom</h3>\n\n<p><img src='http://dailyjs.com/images/posts/jsx-highlight.png' alt='React in Atom' /></p>\n\n<p>Jaakko Lukkari sent in <a href='http://orktes.github.io/atom-react/'>atom-react</a> (GitHub: <a href='https://github.com/orktes/atom-react'>orktes/atom-react</a>, License: <em>MIT</em>), a plugin for the Atom IDE that adds features for React. The main features are syntax highlighting, indentation, code folding, snippets, JSX reformatting, HTML to JSX conversion, and autocomplete.</p>\n\n<p>The documentation has videos of each of the main features. This plugin was based on <a href='https://github.com/reactjs/sublime-react'>sublime-react</a>, which is a pretty popular Sublime package.</p>\n\n<h3 id='jsx_control_statements'>JSX Control Statements</h3>\n\n<p>Asaf Katz sent in JSX Control Statements (GitHub: <a href='https://github.com/valtech-au/jsx-control-statements'>valtech-au/jsx-control-statements</a>, License: <em>MIT</em>, npm: <a href='https://www.npmjs.com/package/jsx-control-statements'>jsx-control-statements</a>) by Alex Gilleran. This adds control statements like <code>If Else</code> and <code>For each</code>:</p>\n<div class='highlight'><pre><code class='text'>&lt;If condition={this.props.condition === &#39;blah&#39;}&gt;\n  &lt;span&gt;IfBlock&lt;/span&gt;\n&lt;Else /&gt;\n  &lt;span&gt;ElseBlock&lt;/span&gt;\n&lt;/If&gt;\n</code></pre>\n</div>\n<p>Loops look like this:</p>\n<div class='highlight'><pre><code class='text'>&lt;For each=&quot;blah&quot; of={this.props.blahs}&gt;\n  &lt;span key={blah}&gt;{blah + this.somethingElse}&lt;/span&gt;\n&lt;/For&gt;\n</code></pre>\n</div>\n<p><a href='http://facebook.github.io/react/tips/if-else-in-JSX.html'>JSX doesn&#8217;t have If-Else</a>, and due to how React works the author has decided to implement these features using JSTransform. This guards against early evaluation during parsing. The readme has a more detailed explanation and examples for Webpack and Node-JSX.</p>\n\n<h3 id='baobab'>Baobab</h3>\n\n<p>Asaf Katz also sent Baobab. Baobab (GitHub: <a href='https://github.com/Yomguithereal/baobab'>Yomguithereal/baobab</a>, License: <em>MIT</em>) by Guillaume Plique is a JavaScript data tree supporting cursors. It&#8217;s inspired by <a href='http://clojuredocs.org/clojure.zip/zipper'>Clojure zippers</a>, and can be used with React through mixins.</p>\n\n<p>Cursors allow you to listen for changes nested within trees, so if your UI is data-driven then you can react to changes to specific parts of objects.</p>\n\n<p>Asaf said that Christian Alfoni&#8217;s blog post on Baobab really sells the library: <a href='http://christianalfoni.github.io/javascript/2015/02/06/plant-a-baobab-tree-in-your-flux-application.html'>Plant a Baobab tree in your flux application</a>:</p>\n\n<blockquote>\n<p>A Baobab tree is strictly the state of your application. All of it. Everything exists in one tree. What makes this tree so special is that any changes will trigger an event, but not as you might expect.</p>\n</blockquote>\n\n<p>Christian uses Baobab with a flux architecture by creating a state tree with Baobab and then rendering the UI with React. The article explains all of the main terminology, so if you&#8217;re not used to thinking about Flux, React, immutability and state, then you should get a lot out of this article.</p>\n   "
                    }
                },
                {
                    "title":"React CSS with Radium, React D3 Components",
                    "link":{
                        "href":"http://dailyjs.com/2015/02/27/radium-d3"
                    },
                    "updated":"2015-02-27T00:00:00+00:00",
                    "id":"http://dailyjs.com/2015/02/27/radium-d3",
                    "content":{
                        "type":"html",
                        "content":"\n     <h3 id='radium'>Radium</h3>\n\n<p>Ken Wheeler sent in <a href='http://projects.formidablelabs.com/radium/'>Radium</a> (GitHub: <a href='https://github.com/FormidableLabs/radium'>FormidableLabs/radium</a>, License: <em>MIT</em>, npm: <a href='https://www.npmjs.com/package/radium'>radium</a>) from Formidable Labs. Radium is a module for managing inline styles on React elements, allowing you to use CSS features that aren&#8217;t usually possible with inline styles.</p>\n\n<p>You can use modifier styles based on component props, media queries, and handle pseudo classes.</p>\n\n<blockquote>\n<p>Radium offers a standard interface and abstractions for dealing with these problems.</p>\n\n<p>When we say expressive, we mean it: math, concatenation, regex, conditionals, functions–JavaScript is at your disposal. Modern web applications demand that the display changes when data changes, and Radium is here to help.</p>\n</blockquote>\n\n<p>Radium provides a mixin called <code>StyleResolverMixin</code> which will generate the styles that you want to add to a component. The style objects it uses look like this:</p>\n<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>radStyles</span> <span class='o'>=</span> <span class='p'>{</span>\n  <span class='nx'>padding</span><span class='o'>:</span> <span class='s1'>&#39;1.5em&#39;</span><span class='p'>,</span>\n  <span class='nx'>border</span><span class='o'>:</span> <span class='mi'>0</span><span class='p'>,</span>\n  <span class='nx'>borderRadius</span><span class='o'>:</span> <span class='mi'>4</span><span class='p'>,</span>\n  <span class='nx'>background</span><span class='o'>:</span> <span class='s1'>&#39;blue&#39;</span><span class='p'>,</span>\n  <span class='nx'>color</span><span class='o'>:</span> <span class='s1'>&#39;white&#39;</span>\n<span class='p'>};</span>\n</code></pre>\n</div>\n<p>You can then call <code>this.buildStyles</code> in the <code>render</code> method, and add the styles to the <code>style</code> attribute. Radium also supports modifiers &#8211; CSS properties that are applied based on the component&#8217;s props and state. Take a look at the <a href='https://github.com/formidablelabs/radium/blob/master/docs/guides/overview.md'>getting started guide</a> to learn more.</p>\n\n<p>Ken also mentioned <a href='https://speakerdeck.com/vjeux/react-css-in-js'>React: CSS in JS by Christopher Chedeau</a>, who works at Facebook in the front-end infrastructure team.</p>\n\n<h3 id='react_d3_components'>React D3 Components</h3>\n\n<p><img src='http://dailyjs.com/images/posts/reactd3charts.png' alt='React 3D Components' /></p>\n\n<p><a href='https://github.com/codesuki/react-d3-components'>react-d3-components</a> (GitHub: <a href='https://github.com/codesuki/react-d3-components'>codesuki/react-d3-components</a>, License: <em>MIT</em>, npm: <a href='https://www.npmjs.com/package/react-d3-components'>react-d3-components</a>) by Neri Marschik is a library for working with D3 in React. Imagine being able to include elements like <code>BarChart</code> in your <code>render</code> methods, which generates charts based on the <code>ReactD3.BarChart</code> class.</p>\n\n<p>You can even add tooltips and CSS classes. The project&#8217;s readme includes lots of charts, but not every D3 chart is supported yet. The author is also working on animations.</p>\n\n<p>I much prefer the idea of giving D3 charts some added structure with React &#8211; usually my D3 code ends up a little bit on the less maintainable side!</p>\n   "
                    }
                },
                {
                    "title":"Transpilers: This Time It's Different",
                    "link":{
                        "href":"http://dailyjs.com/2015/02/26/babel"
                    },
                    "updated":"2015-02-26T00:00:00+00:00",
                    "id":"http://dailyjs.com/2015/02/26/babel",
                    "content":{
                        "type":"html",
                        "content":"\n     <p>JavaScript is changing. It&#8217;s not just the wealth of great libraries that forces us to constantly learn new techniques, but the development of the language specification itself. If you&#8217;re excited about <a href='http://www.2ality.com/2014/09/es6-modules-final.html'>ES6 modules</a>, <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions'>arrow functions</a>, <a href='http://www.nczonline.net/blog/2012/08/01/a-critical-review-of-ecmascript-6-quasi-literals/'>template strings</a>, or <a href='https://github.com/esnext/es6-class'>ES6 classes</a>, then you&#8217;re probably already using these technologies. We don&#8217;t have to wait years for the major browser manufacturers to keep up because we have transpilers.</p>\n\n<p>One reason many of us stuck with JavaScript rather than CoffeeScript and TypeScript is we wanted to keep the stack simple. Adding extra layers can cause issues for debugging, and learning new languages takes time. However, polyfills and projects like 6to5 (now <a href='http://babeljs.io'>Babel</a>) let us work with emerging standards. Some of these language changes help us deal with the way we now use JavaScript, so I&#8217;d argue that ES7&#8217;s <code>await</code> proposal and generators could help us to be more productive for asynchronous programming, and classes will help design more maintainable projects.</p>\n\n<p>For example: I find <a href='http://browserify.org'>Browserify</a> helps me structure client-side code to be more reusable and easier to navigate. And, during development my browsers show the right file and line number for errors, because I use Source Maps. When I read about <a href='http://babeljs.io/blog/2015/02/15/not-born-to-die/'>6to5 being renamed to Babel</a> the thing that interested me the most was ESTree:</p>\n\n<blockquote>\n<p>Recently a number of people from Mozilla, Esprima, The jQuery Foundation, Acorn, 6to5, ESLint, and others have come together to create ESTree, a standard upon which all parser and transpiler tooling will be based on.</p>\n</blockquote>\n\n<p><a href='https://github.com/estree/estree'>The ESTree Spec</a> could be what takes the pain away from our constant quest to use the latest and greatest standards without having to wait for legacy browsers to catch up. Now we can take transpilers seriously:</p>\n\n<blockquote>\n<p>We want for 6to5 to solve the transpiler story. If the community could rally around a tool that provides a solid foundation for dealing with a lot of shared issues then we’ll all be much better off.</p>\n\n<p>Babel will continue to serve as a JavaScript transpiler for using the very latest standards, but will also begin to open up its API for other tools. Anyone who has worked on the project internally knows that Babel is incredibly easy to work with.</p>\n</blockquote>\n\n<p>This time it&#8217;s different: it&#8217;s no longer about browsers and instead about how we choose to write JavaScript. We won&#8217;t know what works until we start to use the new standards for serious projects, but now there are more reasons than ever to be an early adopter.</p>\n\n<h3 id='references'>References</h3>\n\n<ul>\n<li><a href='http://babeljs.io/blog/2015/02/15/not-born-to-die/'>Babel: Not Born to Die</a></li>\n\n<li><a href='https://github.com/estree/estree'>The ESTree Spec</a></li>\n\n<li><a href='http://babeljs.io/docs/learn-es6/'>Learn ES6</a> &#8211; this is really great by the way</li>\n\n<li><a href='http://www.nczonline.net/blog/2012/08/01/a-critical-review-of-ecmascript-6-quasi-literals/'>A critical review of ECMAScript 6 quasi-literals</a></li>\n\n<li><a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions'>MDN: Arrow functions</a></li>\n\n<li><a href='http://www.2ality.com/2014/09/es6-modules-final.html'>ECMAScript 6 modules: the final syntax</a></li>\n\n<li><a href='https://github.com/esnext/es6-class'>es6-class: ES6 classes compiled to ES5</a></li>\n\n<li><a href='http://browserify.org'>Browserify</a></li>\n</ul>\n   "
                    }
                },
                {
                    "title":"Node Roundup: npm jQuery, io.js 1.3.0, proginoskes",
                    "link":{
                        "href":"http://dailyjs.com/2015/02/25/node-roundup"
                    },
                    "updated":"2015-02-25T00:00:00+00:00",
                    "id":"http://dailyjs.com/2015/02/25/node-roundup",
                    "content":{
                        "type":"html",
                        "content":"\n     <h3 id='npm_and_jquery'>npm and jQuery</h3>\n\n<p>It&#8217;s finally happened: jQuery is recommending npm for distributing plugins. My preferred client-side workflow is npm and Browserify, but I know many readers use Bower. Hopefully this shift will encourage more people to use npm for client-side libraries.</p>\n\n<p>Lin Clark mentioned this in this week&#8217;s <a href='http://blog.npmjs.org/post/111968476155/npm-weekly-6'>npm Weekly</a>, and also that npm has hit 1,000,000,000 downloads in a single month. Very impressive!</p>\n\n<h3 id='iojs_130'>io.js 1.3.0</h3>\n\n<p><a href='https://iojs.org/'>io.js</a> 1.3.0 is out. As usual the details are in the <a href='https://github.com/iojs/io.js/blob/v1.x/CHANGELOG.md'>nicely marked up changelog</a>, which now contains links to commits. That makes it easier to look up what the commits actually do, because the one line descriptions can&#8217;t always communicate the subtleties of the pull requests. You&#8217;ll probably think I&#8217;m being sarcastic, but I was happy to see these changes:</p>\n\n<ul>\n<li><span><a href='https://github.com/iojs/io.js/commit/f0296933f8'><code>f0296933f8</code></a></span> - <strong>doc</strong>: correct <code>it&#39;s</code> to <code>its</code> in process (Charmander) <a href='https://github.com/iojs/io.js/pull/837'>#837</a></li>\n\n<li><span><a href='https://github.com/iojs/io.js/commit/4ca7cca84a'><code>4ca7cca84a</code></a></span> - <strong>doc</strong>: grammar fix in smalloc (Debjeet Biswas) <a href='https://github.com/joyent/node/pull/9164'>joyent/node#9164</a></li>\n\n<li><span><a href='https://github.com/iojs/io.js/commit/ba40942ad2'><code>ba40942ad2</code></a></span> - <strong>doc</strong>: fix sentence grammar timers.markdown (Omer Wazir) <a href='https://github.com/iojs/io.js/pull/815'>#815</a></li>\n</ul>\n\n<p>It&#8217;s all about attention to detail! In general this release feels like it&#8217;s focused on quality control &#8211; there are lots of JavaScript code quality fixes and documentation tweaks.</p>\n\n<p>The new changelog formatting also lets you easily see which commits come from Node:</p>\n\n<ul>\n<li><span><a href='https://github.com/iojs/io.js/commit/4ca7cca84a'><code>4ca7cca84a</code></a></span> - <strong>doc</strong>: grammar fix in smalloc (Debjeet Biswas) <a href='https://github.com/joyent/node/pull/9164'>joyent/node#9164</a></li>\n\n<li><span><a href='https://github.com/iojs/io.js/commit/30dca66958'><code>30dca66958</code></a></span> - <strong>doc</strong>: fix code syntax (Dan Dascalescu) <a href='https://github.com/joyent/node/pull/9198'>joyent/node#9198</a></li>\n\n<li><span><a href='https://github.com/iojs/io.js/commit/6a2b204bbc'><code>6a2b204bbc</code></a></span> - <strong>module</strong>: replace NativeModule.require (Herbert Vojčík) <a href='https://github.com/joyent/node/pull/9201'>joyent/node#9201</a></li>\n\n<li><span><a href='https://github.com/iojs/io.js/commit/0cff0521c3'><code>0cff0521c3</code></a></span> - <strong>net</strong>: throw on invalid socket timeouts (cjihrig) <a href='https://github.com/joyent/node/pull/8884'>joyent/node#8884</a></li>\n\n<li><span><a href='https://github.com/iojs/io.js/commit/3b1b4de903'><code>3b1b4de903</code></a></span> - <strong>test</strong>: Timeout#unref() does not return instance (Jan Schär) <a href='https://github.com/joyent/node/pull/9171'>joyent/node#9171</a></li>\n</ul>\n\n<p>I think it&#8217;s <a href='https://twitter.com/rvagg'>@rvagg</a> who writes this document, so thanks Rod for making it easier for us to see what&#8217;s going on.</p>\n\n<h3 id='proginoskes'>proginoskes</h3>\n\n<p>Jason Gerfen sent in proginoskes (GitHub: <a href='https://github.com/jas-/proginoskes'>jas-/proginoskes</a>, License: <em>MIT</em>, npm: <a href='https://www.npmjs.com/package/proginoskes'>proginoskes</a>), a module for monitoring logs from multiple sources by using SSH as the transport. It gives you an object stream, so you can format the results however you want. You can also easily see each source, because the objects have a <code>server</code> property.</p>\n\n<p>This will work really well if you&#8217;re used to writing <code>~/.ssh/config</code> with aliases for servers and keys. The configuration options for proginoskes allow you to define the port, username, private key, and log file location. You could easily pipe your server logs to multiple locations for archival purposes, stats, and error notifications.</p>\n\n<p>This project is based on the <a href='https://www.npmjs.com/package/ssh2'>ssh2</a> module which is actually an SSH client by Brian White that&#8217;s written in JavaScript. The ssh2 module also exposes a stream-based API, but for the underlying SSH protocol.</p>\n   "
                    }
                },
                {
                    "title":"Find Your Next Developer with this JavaScript Online Test",
                    "link":{
                        "href":"http://dailyjs.com/2015/02/24/javascript-online-tests"
                    },
                    "updated":"2015-02-24T00:00:00+00:00",
                    "id":"http://dailyjs.com/2015/02/24/javascript-online-tests",
                    "content":{
                        "type":"html",
                        "content":"\n     <div class='sponsored-content'>\n  <p><a href='/sponsored-content.html' class='label'>Sponsored Content</a> This post is about a commercial product that we think will appeal to DailyJS readers.</p>\n</div>\n<p>Hiring programmers is hard work. Finding candidates takes time, and then figuring out if they&#8217;ve really got the right skills can be tricky as well. I&#8217;ve done technical tests as part of interviews before, and some have actually been enjoyable, but most have been quite poorly conducted. <a href='https://tests4geeks.com'>Tests for Geeks</a> is a service that aims to improve the technical testing process, by providing high-quality tests with reports that are easier for recruiters to understand, and tests that programmers can undertake and attach to their CVs.</p>\n\n<p>Tests are timed, and the default JavaScript test is designed to take 45 minutes. There are some rules: you can&#8217;t press any keys or copy questions, and it tries to discourage candidates from circumventing these rules. If the candidate attempts to press any keys they&#8217;ll see a prompt warning them &#8211; then the test can be continued by pressing a button.</p>\n\n<p>There&#8217;s a <a href='https://tests4geeks.com/test/javascript'>JavaScript online test</a> that includes questions that would be useful for testing client-side developers. Your HR manager or recruiter can easily create unique links to send to candidates. Because there are so many JavaScript tools and frameworks, you might find this test works well for judging a candidate&#8217;s general JavaScript skills.</p>\n\n<p>To actually test candidates, you&#8217;ll need a paid plan. Plans start at $29.95 for three tests, but you can buy unlimited tests for a month for $99.95. If you were looking to hire someone quickly and had lots of applicants, then naturally the unlimited plan would make sense. Also, the paid plans support custom branding, so you can use your own domain name and logo. Tests for Geeks have many other programming tests and the last one which they launched was <a href='https://tests4geeks.com/test/ios-objective-c'>iOS and Objective-C test</a>.</p>\n\n<p>One thing I like about Tests for Geeks is the recruiters I&#8217;ve worked with before can easily understand the reports. The coding test reports explicitly show the strength in each area, so if they&#8217;ve got better knowledge of the DOM you should see that on the report with a higher ranking. This is what the report looks like:</p>\n\n<p><img src='http://dailyjs.com/images/posts/tests-result.png' alt='Sample report' /></p>\n\n<p>I&#8217;ve seen a few online test sites before, but this is the first one that I&#8217;ve used that is specifically designed for technical tests. If you haven&#8217;t done a technical test before then you might like to try it out, or you could even create some new questions.</p>\n\n<p>Many thanks to <em>Tests for Geeks</em> for sponsoring DailyJS!</p>\n   "
                    }
                }
            ]
        }
    }
}